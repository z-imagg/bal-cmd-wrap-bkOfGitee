// grammar gcc_cmd

start: gcc_cmd

///////////非终结符
gcc_cmd: gcc_cmd_1  | gcc_cmd_3
//gcc_cmd: gcc_cmd_1 | gcc_cmd_2 | gcc_cmd_3
gcc_cmd_1: program kv_ls* src_file
//gcc_cmd_1: gcc编译源代码命令，比如 gcc -c -o User.o User.c, 其中 src_file 就是 User.c
//gcc_cmd_2: program kv_ls*
//gcc_cmd_2: 末尾不跟文件, 不确定有没有这种形式
gcc_cmd_3: program kv_ls* file+
//gcc_cmd_3: gcc链接命令 ； 比如  多个.o文件 链接为 单个.so 文件 ，具体例子 比如  gcc -o xxx.so User.o Util.o Price.o，其中 file+ 就是 【Util.o Price.o】

program: FILE_NAME
src_file: FILE_NAME
file: FILE_NAME

kv_ls: kv+

kv: kv3 | kv4 | kv5 | key | kv1 | kv2
//kv : kv3(即 -Ixxx) 必须 比 key 靠前, 否则 kv3(即 -Ixxx) 会被 key 淹没
kv1: key sep_spc val_normal
//kv1 : k v 之间的分割符 是  空格
kv4: key sep_eq val_normal
//kv4 : k v 之间的分割符 是  等号
kv5: key STR
//kv5: 当v用引号包裹时, k v之间 不需要 分割符
kv2: key sep_comma val_any
// kv2: 当k v之间的分割符 为 逗号 时, v的形式是任意的
kv3: arg_inc val_normal
// kv3: 当k 是 -I  时, k v之间 不需要 分割符

arg_inc: ARG_INC
key: KEY
val_normal: TK_NORMAL |   STR
val_any: TK_ANY |   STR
//kv_sep: KV_SEP

sep_eq: "="
sep_spc: " "+
sep_comma: ","

///////////////终结符
STR: _STR | _STR_ESC
ARG_INC: "-I"
KEY: "-" ("-")? (L|D) ("_"|L|D)*
TK_NORMAL: /[^-](\w|[-_\/\.])*/
//正常单词: (开头字符)非- (后跟) 字母 数字 - _ / .
TK_ANY: (","|"-"|SL|L|D)+

SL: "_"|"/"|"."|"="
D: "0".."9"
LL: "a".."z"
UL: "A".."Z"
L: LL | UL

_STR : _STR_DQ | _STR_SQ
_STR_INNER: /.*?/
_STR_DQ : DQ _STR_INNER DQ
_STR_SQ : SQ _STR_INNER SQ
DQ :   "\""
//双引号 DOUBLE_QUOTATION 即 "
SQ :   "\'"
//单引号 SINGLE_QUOTATION 即 '


_STR_ESC : _STR_DQ_ESC | _STR_SQ_ESC
_STR_DQ_ESC : DQ_ESC _STR_INNER DQ_ESC
_STR_SQ_ESC : SQ_ESC _STR_INNER SQ_ESC

DQ_ESC :   "\\\""
//双引号转义符  DOUBLE_QUOTATION_ESCAPE 即 \"
SQ_ESC :   "\\\'"
//单引号转义符 SINGLE_QUOTATION_ESCAPE 即 \"

FILE_NAME: (FILE_NAME_LEAD | D | L) (FILE_NAME_MID | D | L)+
FILE_NAME_LEAD: "." | "_" | "," | "+" | "/"
FILE_NAME_MID: FILE_NAME_LEAD | "-"



///////忽略空格等
WS_INLN: (" "|/\t/)+
%ignore WS_INLN
