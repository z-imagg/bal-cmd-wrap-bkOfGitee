//// 修改PYTHONPATH， 需要 重启vscode后 生效
{ //begin
"version": "0.2.0",
//公用自定义变量
"python_path":"/app/cmd-wrap/:/app/cmd-wrap/py_util/:/app/cmd-wrap/entity/:",
//vscode运行配置们
"configurations": [
// bash调试
//   vscode安装扩展bash-debug以调试bash脚本    https://marketplace.visualstudio.com/items?itemName=rogalmic.bash-debug
{ "type": "bashdb", "request": "launch", "name": "Bash调试当前脚本",  "program": "${file}",
            // "terminalKind": "integrated", #此行可有可无
},

//  直接运行 interceptor_xx.py 
//     interceptor_xx.py --__enable_develop_mode  --__help
{ "name": "interceptor_cxx 【固定参数】【废弃，因为不能直接运行拦截器】", "type": "debugpy", "request": "launch", "program": "interceptor_xx.py", "console": "integratedTerminal",
"args": [  
],
"env": { "PYTHONPATH": "${python_path}" },
},

//  运行 interceptor_xx.py 的 软链接gcc （编译）
{ "name": "gcc编译【由cmd_setup.sh使gcc指向interceptor_xx】",  "type": "debugpy", "request": "launch",  "program": "/usr/bin/gcc", "console": "integratedTerminal",
"args": [  
"-c", "/app/cmd-wrap/test_cxx_src/TestC02.c",
"-o", "/app/cmd-wrap/test_cxx_src/TestC02.o",
"--__enable_develop_mode",
"-g1"
],
 "env": { "PYTHONPATH": "${python_path}"  },
},

//  运行 interceptor_xx.py 的 软链接gcc （链接）
{ "name": "gcc链接【由cmd_setup.sh使gcc指向interceptor_xx】", "type": "debugpy", "request": "launch", "program": "/usr/bin/gcc", "console": "integratedTerminal",
"args": [  
"/app/cmd-wrap/test_cxx_src/TestC02.o",
"-o", "/app/cmd-wrap/test_cxx_src/TestC02.elf",
"--__enable_develop_mode"
],
"env": {  "PYTHONPATH": "${python_path}"  },
},

//  运行 interceptor_xx.py 的 软链接g++ （编译）
{  "name": "g++编译【由cmd_setup.sh使g++指向interceptor_xx】",  "type": "debugpy",  "request": "launch", "program": "/usr/bin/g++",  "console": "integratedTerminal",
"args": [  
"-c", "/app/cmd-wrap/test_cxx_src/TestCxx01.cpp",
"-o", "/app/cmd-wrap/test_cxx_src/TestCxx01.o",
"--__enable_develop_mode",
"-g1"
],
"env": {  "PYTHONPATH": "${python_path}" },
},

//  运行 interceptor_xx.py 的 软链接g++ （链接）
{  "name": "g++链接【由cmd_setup.sh使g++指向interceptor_xx】",   "type": "debugpy",   "request": "launch", "program": "/usr/bin/g++", "console": "integratedTerminal",
"args": [  
"/app/cmd-wrap/test_cxx_src/TestCxx01.o",
"-o", "/app/cmd-wrap/test_cxx_src/TestCxx01.elf",
"--__enable_develop_mode"
],
"env": {  "PYTHONPATH": "${python_path}"  },
},
//  运行 interceptor_xx.py 的 软链接clang （编译）
{ "name": "clang编译【由cmd_setup.sh使clang指向interceptor_xx】",  "type": "debugpy", "request": "launch",  "program": "/usr/bin/clang", "console": "integratedTerminal",
"args": [  
"-m64", "-mcx16", "-Isubprojects/dtc/libfdt/libfdt.a.p", "-Isubprojects/dtc/libfdt", "-I../subprojects/dtc/libfdt", "-fcolor-diagnostics", "-Wall", "-Winvalid-pch", "-Werror", "-std=gnu11", "-O2", "-g", "-Wpointer-arith", "-Wcast-qual", "-Wnested-externs", "-Wstrict-prototypes", "-Wmissing-prototypes", "-Wredundant-decls", "-Wshadow", "-DFDT_ASSUME_MASK=0", "-DNO_YAML", "-DNO_VALGRIND", "-D_GNU_SOURCE", "-D_FILE_OFFSET_BITS=64", "-D_LARGEFILE_SOURCE", "-fno-strict-aliasing", "-fno-common", "-fwrapv", "-fPIE", "-MD", "-MQ", "subprojects/dtc/libfdt/libfdt.a.p/fdt.c.o", "-MF", "subprojects/dtc/libfdt/libfdt.a.p/fdt.c.o.d", "-o", "subprojects/dtc/libfdt/libfdt.a.p/fdt.c.o", "-c", "../subprojects/dtc/libfdt/fdt.c"
],
 "env": { "PYTHONPATH": "${python_path}"  },
},

//  运行 interceptor_xx.py 的 软链接clang （链接）
{ "name": "clang链接【由cmd_setup.sh使clang指向interceptor_xx】", "type": "debugpy", "request": "launch", "program": "/usr/bin/clang", "console": "integratedTerminal",
"args": [  
"/app/cmd-wrap/test_cxx_src/TestC02.o",
"-o", "/app/cmd-wrap/test_cxx_src/TestC02.elf",
"--__enable_develop_mode"
],
"env": {  "PYTHONPATH": "${python_path}"  },
},

//  运行 interceptor_xx.py 的 软链接clang++ （编译）
{  "name": "clang++编译【由cmd_setup.sh使clang++指向interceptor_xx】",  "type": "debugpy",  "request": "launch", "program": "/usr/bin/clang++",  "console": "integratedTerminal",
"args": [  
"-c", "/app/cmd-wrap/test_cxx_src/TestCxx01.cpp",
"-o", "/app/cmd-wrap/test_cxx_src/TestCxx01.o",
"--__enable_develop_mode",
"-g1"
],
"env": {  "PYTHONPATH": "${python_path}" },
},

//  运行 interceptor_xx.py 的 软链接clang++ （链接）
{  "name": "clang++链接【由cmd_setup.sh使clang++指向interceptor_xx】",   "type": "debugpy",   "request": "launch", "program": "/usr/bin/clang++", "console": "integratedTerminal",
"args": [  
"/app/cmd-wrap/test_cxx_src/TestCxx01.o",
"-o", "/app/cmd-wrap/test_cxx_src/TestCxx01.elf",
"--__enable_develop_mode"
],
"env": {  "PYTHONPATH": "${python_path}"  },
},

//  （修bug）运行 interceptor_xx.py 的 软链接g++ （链接、链接）
{  "name": "修bug【拦截器化身g++】", "type": "debugpy",  "request": "launch", "program": "/usr/bin/g++", "console": "integratedTerminal",
"args": [  
"-Wl,-rpath", "/app/cmd-wrap/test_cxx_src/TestCxx01.cpp",
"-o", "TestCxx01.elf"
],
"env": { "PYTHONPATH": "${python_path}" },
},

] //end_of_'configurations'
}//end