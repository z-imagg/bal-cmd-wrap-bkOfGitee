// grammar gcc_cmd

start: gcc_cmd

///////////非终结符
gcc_cmd: gcc_cmd_1  | gcc_cmd_3
//gcc_cmd: lark 将 先 gcc_cmd_1 后 gcc_cmd_3
gcc_cmd_1: program kv_ls src_file
//gcc_cmd_1: gcc编译源代码命令，比如 gcc -c -o User.o User.c, 其中 src_file 就是 User.c
//gcc_cmd_2: program kv_ls
//gcc_cmd_2: 末尾不跟文件, 不确定有没有这种形式
gcc_cmd_3: program kv_ls file+
//gcc_cmd_3: gcc链接命令 ； 比如  多个.o文件 链接为 单个.so 文件 ，具体例子 比如  gcc -o xxx.so User.o Util.o Price.o，其中 file+ 就是 【Util.o Price.o】

program: FILE_NAME
src_file: FILE_NAME
file: FILE_NAME

kv_ls: kv*

kv: kv_i_spc_incpth|kv_i__incpth | kv_k_eq_valnorm | kv_k__str |kv_isystem_spc_valnorm | kv_k_spc_valnorm | kv_k_comma_valany | key
//kv : kv_I_incPth(即 -Ixxx) 必须 比 key 靠前, 否则 kv_I_incPth(即 -Ixxx) 会被 key 淹没
kv_k_spc_valnorm: key sep_spc val_normal
//kv_k_spc_valnorm : k v 之间的分割符 是  空格
kv_isystem_spc_valnorm: ARG_ISYSTEM sep_spc isystem_val
kv_k_eq_valnorm: key sep_eq val_normal
//kv_k_eq_valnorm : k v 之间的分割符 是  等号
kv_k__str: key STR
//kv_k__str: 当v用引号包裹时, k v之间 不需要 分割符
kv_k_comma_valany: key sep_comma val_any
// kv_k_comma_valany: 当k v之间的分割符 为 逗号 时, v的形式是任意的
kv_i__incpth: ARG_INC include_val
kv_i_spc_incpth: ARG_INC sep_spc sep_include_val
// kv_i__incpth: 当k 是 -I  时, k v之间 不需要 分割符
// kv_i__incpth: ARG_INC sep_spc include_val

include_val: val_normal
sep_include_val: val_normal
isystem_val : val_normal

key: KEY
val_normal: TK_NORMAL |   STR
val_any: TK_ANY |   STR
//kv_sep: KV_SEP

sep_eq: "="
sep_spc: " "+
sep_comma: ","

///////////////终结符
STR: _STR | _STR_ESC
ARG_INC: "-I"
ARG_ISYSTEM: "-isystem"
KEY: "-" ("-")? (L|D) ("_"|L|D)*
TK_NORMAL: /[_\/\.abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789][-_\/\.abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789]*/
// TK_NORMAL: 开头字符 只 比 后面字符 少 中划线
//正常单词: (开头字符)为 后字符 去掉 中划线 , (后跟 0个或多个) 字母 数字 中划线 下划线 正斜线 点
TK_ANY: (","|"-"|SL|L|D)+

SL: "_"|"/"|"."|"="
D: "0".."9"
LL: "a".."z"
UL: "A".."Z"
L: LL | UL

_STR : _STR_DQ | _STR_SQ
_STR_INNER: /.*?/
//  .*?   匹配任意字符序列（除换行符外），但尽可能少地匹配（非贪婪模式）。
_STR_DQ : DQ _STR_INNER DQ
_STR_SQ : SQ _STR_INNER SQ
DQ :   "\""
//双引号 DOUBLE_QUOTATION 即 "
SQ :   "\'"
//单引号 SINGLE_QUOTATION 即 '


_STR_ESC : _STR_DQ_ESC | _STR_SQ_ESC
_STR_DQ_ESC : DQ_ESC _STR_INNER DQ_ESC
_STR_SQ_ESC : SQ_ESC _STR_INNER SQ_ESC

DQ_ESC :   "\\\""
//双引号转义符  DOUBLE_QUOTATION_ESCAPE 即 \"
SQ_ESC :   "\\\'"
//单引号转义符 SINGLE_QUOTATION_ESCAPE 即 \"

FILE_NAME: (FILE_NAME_LEAD | D | L) (FILE_NAME_MID | D | L)+
FILE_NAME_LEAD: "." | "_" | "," | "+" | "/"
FILE_NAME_MID: FILE_NAME_LEAD | "-"



///////忽略空格等
WS_INLN: (" "|/\t/)+
%ignore WS_INLN
